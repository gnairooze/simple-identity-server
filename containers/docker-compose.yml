name: simple-identity-env

# Simple Identity Server - Secure Docker Compose Configuration
# 
# SECURITY NOTICE:
# This configuration uses environment variables from production.env file.
# All sensitive data is externalized to the production.env file.
#
# Usage:
# 1. Review and update production.env with your secure values
# 2. Ensure production.env has restricted permissions: chmod 600 production.env
# 3. Run: docker-compose up -d
#
# The production.env file contains all environment variables including:
# - Database credentials and connection strings
# - CORS allowed origins
# - Certificate passwords
# - Load balancer configuration

services:
  # Load Balancer - Caddy
  simple-identity-lb:
    image: caddy:2-alpine
    container_name: simple-identity-server-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./nginx/ssl:/etc/caddy/ssl:ro
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    depends_on:
      - api-instance-1
      - api-instance-2
      - api-instance-3
    networks:
      simple-identity-net:
        ipv4_address: 172.25.0.10
    restart: unless-stopped

  # API Instance 1
  api-instance-1:
    build:
      context: ../code/SimpleIdentityServer/SimpleIdentityServer.API
      dockerfile: Dockerfile
    container_name: simple-identity-server-api-1
    ports:
      - "8081:443"  # Direct access for testing
    env_file:
      - production.env
    environment:
      # Instance-specific configuration (only values that need to be different per instance)
      - SIMPLE_IDENTITY_SERVER_NODE_NAME=api-instance-1
    volumes:
      - shared_certs:/app/certs
      - ./nginx/ssl/identity-dev-test.crt:/app/certs/identity-dev-test.crt:ro
      - ./nginx/ssl/identity-dev-test.key:/app/certs/identity-dev-test.key:ro
      - ./nginx/ssl/encryption.pfx:/app/certs/encryption.pfx:ro
      - ./nginx/ssl/signing.pfx:/app/certs/signing.pfx:ro
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      simple-identity-net:
        ipv4_address: 172.25.0.11
    restart: unless-stopped

  # API Instance 2
  api-instance-2:
    build:
      context: ../code/SimpleIdentityServer/SimpleIdentityServer.API
      dockerfile: Dockerfile
    container_name: simple-identity-server-api-2
    ports:
      - "8082:443"  # Direct access for testing
    env_file:
      - production.env
    environment:
      # Instance-specific configuration (only values that need to be different per instance)
      - SIMPLE_IDENTITY_SERVER_NODE_NAME=api-instance-2
    volumes:
      - shared_certs:/app/certs
      - ./nginx/ssl/identity-dev-test.crt:/app/certs/identity-dev-test.crt:ro
      - ./nginx/ssl/identity-dev-test.key:/app/certs/identity-dev-test.key:ro
      - ./nginx/ssl/encryption.pfx:/app/certs/encryption.pfx:ro
      - ./nginx/ssl/signing.pfx:/app/certs/signing.pfx:ro
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      simple-identity-net:
        ipv4_address: 172.25.0.12
    restart: unless-stopped

  # API Instance 3
  api-instance-3:
    build:
      context: ../code/SimpleIdentityServer/SimpleIdentityServer.API
      dockerfile: Dockerfile
    container_name: simple-identity-server-api-3
    ports:
      - "8083:443"  # Direct access for testing
    env_file:
      - production.env
    environment:
      # Instance-specific configuration (only values that need to be different per instance)
      - SIMPLE_IDENTITY_SERVER_NODE_NAME=api-instance-3
    volumes:
      - shared_certs:/app/certs
      - ./nginx/ssl/identity-dev-test.crt:/app/certs/identity-dev-test.crt:ro
      - ./nginx/ssl/identity-dev-test.key:/app/certs/identity-dev-test.key:ro
      - ./nginx/ssl/encryption.pfx:/app/certs/encryption.pfx:ro
      - ./nginx/ssl/signing.pfx:/app/certs/signing.pfx:ro
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      simple-identity-net:
        ipv4_address: 172.25.0.13
    restart: unless-stopped

  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: simple-identity-server-db
    env_file:
      - production.env
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      simple-identity-net:
        ipv4_address: 172.25.0.20
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P $$SA_PASSWORD -Q 'SELECT 1' -C"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Health Check Service (Optional - for monitoring)
  health-check:
    image: curlimages/curl:latest
    container_name: simple-identity-server-health
    extra_hosts:
      - "identity.dev.test:172.25.0.10"
    volumes:
      - ./nginx/ssl/identity-dev-test-ca.crt:/usr/local/share/ca-certificates/nginx-ca.crt:ro
    command: >
      sh -c "
      # Copy certificate to ca-certificates and update
      cp /usr/local/share/ca-certificates/nginx-ca.crt /etc/ssl/certs/ 2>/dev/null || true;
      update-ca-certificates 2>/dev/null || true;
      # Alternative: use the certificate directly with curl
      while true; do
        echo '=== Health Check ===' 
        echo \"Timestamp: \$(date)\"
        echo 'Load Balancer Health:'
        curl -f --cacert /usr/local/share/ca-certificates/nginx-ca.crt https://identity.dev.test/health || echo 'Caddy LB Health Check Failed'
        echo ''
        echo 'API Instance 1:'
        curl -f -k https://172.25.0.11:443/home/health || echo 'API 1 Health Check Failed'
        echo ''
        echo 'API Instance 2:'
        curl -f -k https://172.25.0.12:443/home/health || echo 'API 2 Health Check Failed'
        echo ''
        echo 'API Instance 3:'
        curl -f -k https://172.25.0.13:443/home/health || echo 'API 3 Health Check Failed'
        echo ''
        echo 'Sleeping for 60 seconds...'
        sleep 60
      done"
    depends_on:
      - simple-identity-lb
      - api-instance-1
      - api-instance-2
      - api-instance-3
    networks:
      simple-identity-net:
        ipv4_address: 172.25.0.30
    restart: unless-stopped

networks:
  simple-identity-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
          gateway: 172.25.0.1

volumes:
  sqlserver_data:
    driver: local
  shared_certs:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  caddy_logs:
    driver: local
