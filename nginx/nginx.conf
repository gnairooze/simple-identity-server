events {
    worker_connections 1024;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Client settings (moved from proxy_params.conf)
    client_max_body_size 1m;
    client_body_timeout 30s;
    client_header_timeout 30s;

    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=token_limit:10m rate=5r/s;

    # Upstream configuration for SimpleIdentityServer API
    upstream simple_identity_api {
        # Load balancing method
        least_conn;
        
        # API instances
        server 172.25.0.11:80 max_fails=3 fail_timeout=30s;
        server 172.25.0.12:80 max_fails=3 fail_timeout=30s;
        server 172.25.0.13:80 max_fails=3 fail_timeout=30s;
        
        # Health checks
        keepalive 32;
    }

    # HTTP to HTTPS redirect server
    server {
        listen 80;
        server_name _;
        
        # Health check endpoint for load balancer
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Redirect all HTTP traffic to HTTPS (comment out for HTTP-only testing)
        return 301 https://$server_name$request_uri;
        
        # For HTTP-only testing, proxy to API
        # location / {
        #    # Rate limiting
        #    limit_req zone=api_limit burst=20 nodelay;
        #    
        #    # Special rate limiting for token endpoint
        #    location ~ ^/connect/token {
        #        limit_req zone=token_limit burst=10 nodelay;
        #        proxy_pass http://simple_identity_api;
        #        include /etc/nginx/proxy_params.conf;
        #    }
            
        #    # Proxy to upstream
        #    proxy_pass http://simple_identity_api;
        #    include /etc/nginx/proxy_params.conf;
        #}
    }

    # HTTPS server (uncomment and configure for production)
    server {
        listen 443 ssl http2;
        server_name _;
         
         # SSL configuration
         ssl_certificate /etc/nginx/ssl/dev.test.crt;
         ssl_certificate_key /etc/nginx/ssl/dev.test.key;
         ssl_protocols TLSv1.2 TLSv1.3;
         ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
         ssl_prefer_server_ciphers on;
         ssl_session_cache shared:SSL:10m;
         ssl_session_timeout 10m;
         
         # Security headers
         add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
         add_header X-Frame-Options DENY always;
         add_header X-Content-Type-Options nosniff always;
         add_header X-XSS-Protection "1; mode=block" always;
         add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
        # Health check endpoint for load balancer
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        location / {
            # Rate limiting
            limit_req zone=api_limit burst=20 nodelay;
             
            # Special rate limiting for token endpoint
            location ~ ^/connect/token {
                limit_req zone=token_limit burst=10 nodelay;
                proxy_pass http://simple_identity_api;
                include /etc/nginx/proxy_params.conf;
            }
            
            # Proxy to upstream
            proxy_pass http://simple_identity_api;
            include /etc/nginx/proxy_params.conf;
        }
    }
}
